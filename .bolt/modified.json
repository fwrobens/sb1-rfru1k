[["/home/project/app/admin/page.tsx","\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '@/lib/auth';\nimport { db } from '@/lib/firebase';\nimport { collection, query, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function AdminPanel() {\n  const { user } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [notes, setNotes] = useState([]);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user?.role === 'admin') {\n      fetchUsers();\n      fetchNotes();\n    }\n  }, [user]);\n\n  const fetchUsers = async () => {\n    const q = query(collection(db, 'users'));\n    const querySnapshot = await getDocs(q);\n    const fetchedUsers = [];\n    querySnapshot.forEach((doc) => {\n      fetchedUsers.push({ id: doc.id, ...doc.data() });\n    });\n    setUsers(fetchedUsers);\n  };\n\n  const fetchNotes = async () => {\n    const q = query(collection(db, 'notes'));\n    const querySnapshot = await getDocs(q);\n    const fetchedNotes = [];\n    querySnapshot.forEach((doc) => {\n      fetchedNotes.push({ id: doc.id, ...doc.data() });\n    });\n    setNotes(fetchedNotes);\n  };\n\n  const handleUpdateUser = async (userId, field, value) => {\n    try {\n      await updateDoc(doc(db, 'users', userId), { [field]: value });\n      fetchUsers();\n      toast({\n        title: \"User Updated\",\n        description: `User ${field} has been updated successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to update user ${field}. Please try again.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteUser = async (userId) => {\n    if (confirm(\"Are you sure you want to delete this user? This action cannot be undone.\")) {\n      try {\n        await deleteDoc(doc(db, 'users', userId));\n        fetchUsers();\n        toast({\n          title: \"User Deleted\",\n          description: \"User has been deleted successfully.\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete user. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (!user || user.role !== 'admin') {\n    return <div className=\"container mx-auto px-4 py-8\">Access denied. Admin only.</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Admin Panel</h1>\n      <div className=\"space-y-8\">\n        <div>\n          <h2 className=\"text-2xl font-semibold mb-4\">Users ({users.length})</h2>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Email</TableHead>\n                <TableHead>Subscription</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>{user.email}</TableCell>\n                  <TableCell>\n                    <Select\n                      onValueChange={(value) => handleUpdateUser(user.id, 'subscription', value)}\n                      defaultValue={user.subscription}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select subscription\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Free\">Free</SelectItem>\n                        <SelectItem value=\"Premium\">Premium</SelectItem>\n                        <SelectItem value=\"Admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </TableCell>\n                  <TableCell>\n                    <Select\n                      onValueChange={(value) => handleUpdateUser(user.id, 'role', value)}\n                      defaultValue={user.role || 'user'}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </TableCell>\n                  <TableCell>\n                    <Select\n                      onValueChange={(value) => handleUpdateUser(user.id, 'status', value)}\n                      defaultValue={user.status || 'active'}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"banned\">Banned</SelectItem>\n                        <SelectItem value=\"disabled\">Disabled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </TableCell>\n                  <TableCell>\n                    <Button onClick={() => handleDeleteUser(user.id)} variant=\"destructive\">\n                      Delete\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n        <div>\n          <h2 className=\"text-2xl font-semibold mb-4\">Notes ({notes.length})</h2>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Title</TableHead>\n                <TableHead>User ID</TableHead>\n                <TableHead>Created At</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {notes.map((note) => (\n                <TableRow key={note.id}>\n                  <TableCell>{note.title}</TableCell>\n                  <TableCell>{note.userId}</TableCell>\n                  <TableCell>{new Date(note.createdAt).toLocaleString()}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n}"]]